PYTHON BASICS
What is Python?

Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python's design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than in languages such as C++ or Java.

 Key Features of Python:

1. Readability: Python's syntax is clear and easy to read, which makes it accessible for beginners and powerful for experts.
2. Interpreted Language: Python code is executed line by line, which makes debugging easier and speeds up development.
3. Dynamic Typing: Variables in Python do not need explicit declarations; the type is determined at runtime.
4. Extensive Standard Library: Python comes with a rich standard library that supports many common programming tasks such as file I/O, system calls, and even web browsing.
5. Community and Ecosystem: A large and active community contributes to a vast ecosystem of third-party packages and frameworks.

Use Cases:

- Web Development: Frameworks like Django and Flask.
- Data Analysis and Machine Learning: Libraries like pandas, NumPy, and scikit-learn.
- Automation and Scripting: Used for writing small scripts to automate tasks.
- Scientific Computing: Libraries like SciPy and SymPy.
- Game Development: Libraries like Pygame.

INSTALLING PYTHON
Steps to Install Python on Windows:

1. Download Python Installer: Go to the official Python website and download the latest Python installer for Windows.
2. Run the Installer: Execute the downloaded file. Ensure you check the option "Add Python to PATH" before clicking "Install Now".
3. Verify Installation:
     python --version
4. Set Up Virtual Environment:
      python -m venv myenv

Steps to Install Python on macOS:
1. Use Homebrew:
      brew install python
2. Verify Installation:
      python3 --version
3. Set Up Virtual Environment:
      python3 -m venv myenv

Steps to Install Python on Linux:
1. Use Package Manager (e.g., Ubuntu):
        sudo apt update
        sudo apt install python3
2. Verify Installation:
        python3 --version
3. Set Up Virtual Environment:
        python3 -m venv myenv

PYTHON SYNTAX AND SEMANTICS
Hello, World! Program:
    print("Hello, World!")

print: A built-in function that outputs the specified message to the console.
"Hello, World!": A string literal enclosed in double quotes.

DATA TYPES AND VARIABLES
Basic Data Types:

- int: Integer numbers.
- float: Floating-point numbers.
- str: Strings.
- bool: Boolean values (True or False).
- list: Ordered sequence of items.
- tuple: Immutable ordered sequence of items.
- dict: Unordered collection of key-value pairs.

Example in Script:
# Integers
age = 25
# Floats
height = 5.9
# Strings
name = "Alice"
# Booleans
is_student = True
# Lists
numbers = [1, 2, 3, 4, 5]
# Tuples
coordinates = (10.0, 20.0)
# Dictionaries
person = {"name": "Alice", "age": 25}

print(age, height, name, is_student, numbers, coordinates, person)

CONTROL STRUCTURES
Conditional Statements:
age = 18
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")

For Loop:
for i in range(5):
    print(i)

FUNCTIONS IN PYTHON
Functions are blocks of reusable code that perform a specific task. They help in organizing code and making it more readable and maintainable.

Example;
def add(a, b):
    return a + b

result = add(3, 5)
print(result)  # Output: 8

LISTS AND DICTIONARIES
Lists are Ordered collections of items, accessed by index, while Dictionaries are Unordered collections of key-value pairs, accessed by key.

Example Script:
# List
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(numbers)

# Dictionary
person = {"name": "Alice", "age": 25}
person["email"] = "alice@example.com"
print(person)

EXCEPTION HANDLING
Exception handling allows you to handle errors gracefully without crashing the program.

Example Script:
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")
finally:
    print("This will always execute.")

MODULES AND PACKAGES
- Modules: Single files containing Python code.
- Packages: Directories containing multiple modules and an __init__.py file.
Example Using math Module:
import math

print(math.sqrt(16))  # Output: 4.0

FILE I/O
Reading from a File:
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)

Writing to a File:
lines = ["First line", "Second line", "Third line"]
with open('output.txt', 'w') as file:
    for line in lines:
        file.write(line + '\n')

CITE AND REFERENCES
1. Python Official Documentation. 
2. Python Tutorial. 
3. Real Python.
4. GeeksforGeeks.
